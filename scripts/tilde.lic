=begin
	quick shortcuts for dealing with containers

	examples:
	  ~cloak             => look in my cloak
	  ~cloak box         => put box in my cloak
	  ~pants ruby amulet => put ruby amulet in my pants

	additive search algorithm weights:
		1. right hand
		2. left hand
		3. loot
		4. items in GameObj.containers.keys

	Notes:

	1. due to safety concerns it only works on containers in your inventory
	   however the items that it will try to add to your container can be
	   anywhere reachable
	2. only your 'stow' container contents are eagerly loaded in the Game stream
	   so until you look in some containers, their contents will not be reachable

  Required: Lich 4.3.12
  Author: Ondreian
  Tags: util, containers
  
=end
module Tilde
	class TildeError < Exception; end
	module CLI
		PATTERN   = %[<c>~]
		HELP_CMDS = %w[help info]
		Handler   = -> incoming {
			return incoming unless incoming.start_with?(PATTERN)
			CLI.consume(incoming)
			return nil
		}

		def self.add_hook()
			UpstreamHook.add(self.name.downcase, Handler)
		end

		def self.print_help()
			fail TildeError, <<-HELP
			  tilde@1.0.0

			  this script is useful short-hand to interact with your containers

			  example:
			   ~pants       => look in my pants
			   ~pants chest => put chest in my pants
			HELP
		end

		def self.parse_input(raw)
			raw = raw.slice(PATTERN.size, raw.size)
			container, *item = raw.split(" ")
			return print_help() if HELP_CMDS.include?(container)
			[container, 
				item.join(" ")]
		end

		def self.consume(incoming)
			begin
				Tilde.schedule(
					*CLI.parse_input(incoming))
			rescue TildeError => e
				_respond e.message
			rescue Exception => e
				_respond e.message
				respond e.backtrace
			end
		end

		CLI.add_hook()
	end

	def self.find_container(search)
		GameObj.inv.find do |item|
			item.noun.start_with?(search) 
		end or container_not_found(search)
	end

	def self.container_not_found(noun)
		fail TildeError, <<-ERROR
		   <b>could not find Container[noun: #{noun}] in your inventory</b>

		   options: #{GameObj.inv.map(&:noun).join(", ")}
		ERROR
	end

	def self.build_search_list()
		([GameObj.right_hand, GameObj.left_hand] + 
			GameObj.loot.to_a + 
			GameObj.containers.values.flatten)
	end

	def self.find_item(desc)
		build_search_list.reject do |item| item.id.nil? end
			.find do |item| item.name.include?(desc) end or 
				fail TildeError, %[could not find any matches for Item[desc: #{desc}]]
	end

	def self.schedule(container, item)
		container = Tilde.find_container(container)
		if item.empty?
			Tilde::OPERATIONS << {container: container}
		else
			Tilde::OPERATIONS << {container: container, item: Tilde.find_item(item)}
		end
	end

	OPERATIONS = Queue.new

	def self.init()
		loop do 
			wait_while do OPERATIONS.empty? end
			Tilde.run_in_main_thread **OPERATIONS.shift until OPERATIONS.empty?
		end
	end

	def self.run_in_main_thread(container: container, item: item)
		if item.nil?
			look_in(container)
		else
			_drag(container, item)
		end
	end

	def self._drag(container, item)
		fput %[_drag ##{item.id} ##{container.id}]
	end

	def self.look_in(container)
		fput %[look in ##{container.id}]
	end

	Tilde.init()
end
