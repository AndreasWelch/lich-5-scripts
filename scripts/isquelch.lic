=begin
  isquelch.lic: Script for configurable squelching of incoming lines.

  Author: Ineum
  Version: 0.0.1
=end

@cmd_string = "#{$lich_char}#{script.name}"
@regex_mutex = Mutex.new
@downsstream_hook_name = "#{@script_name} filter"

Vars[@script_name] ||= Hash.new
Vars[@script_name][:squelches] ||= []

def rebuild_regex()
    # Function to rebuild regex when necessary, respecting the lock for threading.
    @regex_mutex.synchronize {
        @regex = Regexp.union Vars[@script_name][:squelches].select {|entry| entry[:enabled]}.map {|val| val[:text]}
    }
end

check_squelch  = proc { |server_string|
    if server_string.strip.length == 0
        server_string
    else
        pass_line = true
        @regex_mutex.synchronize {
            pass_line = !(@regex.match? server_string)
        }
        pass_line ? server_string : nil
    end
}

DownstreamHook.add @downsstream_hook_name, check_squelch

before_dying {
    DownstreamHook.remove @downsstream_hook_name
}

rebuild_regex()

toggle_upstream

loop {
    line = upstream_get
    # Exit early if the command isn't for us
    if (line =~ /#{@cmd_string}\s*(?<command>\w+)\s*(?<argument>.*)/)
        match = $~.named_captures
        command = match["command"]
        argument = match["argument"]
        update_regex = false
        case command
        when /add/
            target = argument
            Vars[@script_name][:squelches].push({text: target, enabled: true})
            respond "Added \/#{target}\/"
            update_regex = true
        when /(?<state>en|dis)able/
            state_text = $~.named_captures["state"]
            state =  state_text == "en"
            index = argument.strip.to_i
            if index >= Vars[@script_name][:squelches].length
                respond "Cannot access invalid entry"
            else
                Vars[@script_name][:squelches][index][:enabled] = state
                puts "${Vars[@script_name][:squelches][index]} is now #{state_text}d."
            end
        when /remove|rm/
            index = argument.strip.to_i
            if index >= Vars[@script_name][:squelches].length
                respond "Invalid index #{index} cannot be removed"
            else
                text = Vars[@script_name][:squelches][index][:text]
                Vars[@script_name][:squelches].delete_at(index)
                respond "Removed \/#{text}\/"
                update_regex = true
            end
        when /list|ls/
            if Vars[@script_name][:squelches].length == 0
                respond "No squelch entries recorded."
            else
                Vars[@script_name][:squelches].each_with_index {|squelch, i|
                    respond "#{i}. \/#{squelch[:text]}\/ (#{squelch[:enabled] ? 'enabled' : 'disabled'})"
                }
            end
        when /stop/
           break
        else
            respond "Usage: ;isquelch command [arguments]"
            respond ""
            respond "Commands:"
            respond "add REGEX: Adds REGEX to the list of squelched expressions."
            respond "enable INDEX: Enables the regular expression stored at the specified INDEX."
            respond "disable INDEX: Disables the regular expression stored at the specified INDEX."
            respond "remove INDEX: Removes the regular expression stored at the specified INDEX."
            respond "list: Lists all regular expressions"
        end

        if update_regex
            rebuild_regex()
        end
    end
}
