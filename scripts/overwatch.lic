=begin
  A simple script to deal with those pesky hiding targets.
  Will force a creature to populate into GameObj when they are revealed if they're not already present.

        author: elanthia-online
  contributers: FarFigNewGut, Nisugi
          game: Gemstone
          tags: hunting, target, hidden, bandits
       version: 1.0

  Improvements:
  v1.0 (2023-06-27)
    - initial creation
    - OverWatch.room_with_hiders will return room number where target was seen hiding
    - OverWatch.room_with_hiders will return nil when room changed, or hidden creature is uncovered
    - OverWatch.hiders? will return true/false based off above
    - Supports Bandits, Triton Assassins, Triton Wardens
    - Need to know what other creatures hide/ambush.
=end

module OverWatch
  status_tags
  @hidden_targets = nil
  @debug = false

  def self.track_hidden_targets(room_id)
    @hidden_targets = room_id
    echo "Target hid." if @debug == true
  end

  def self.push_revealed_targets(target_id, target_noun, target_name)
    @hidden_targets = nil
    echo "Target located." if @debug == true
    if GameObj.targets.any? { |npc| npc.id == target_id }
      echo "NPC already included" if @debug == true
    else
      GameObj.new_npc(target_id, target_noun, target_name.gsub(/  /, " "))
    end
    if XMLData.current_target_ids.include?(target_id)
      echo "ID already in current_target_ids" if @debug == true
    else
      XMLData.current_target_ids.unshift(target_id)
    end
  end

  def self.room_with_hiders
    return @hidden_targets
  end

  def self.hiders?
    room_with_hiders.eql?(XMLData.room_id)
  end

  def self.room_with_hiders_reset
    @hidden_targets = nil
    return @hidden_targets
  end

  def self.watch
    while (line = get)
      case line
      when /^You reveal <pushBold\/>\w+ <a exist="(\d+)" noun=" ?(\w+)">([^<]+)<\/a><popBold\/> from hiding\!/ # Sunburst
        OverWatch.push_revealed_targets($1, $2, $3)
      when /^<pushBold\/>\w+ <a exist="(\d+)" noun=" ?(\w+)">([^<]+)<\/a><popBold\/> is forced from hiding\!/
        OverWatch.push_revealed_targets($1, $2, $3)
      when /^<pushBold\/>\w+ <a exist="(\d+)" noun=" ?(\w+)">([^<]+)<\/a><popBold\/> leaps from hiding to attack\!/ # Players, Assassins
        OverWatch.push_revealed_targets($1, $2, $3)
      when /^<pushBold\/>\w+ <a exist="(\d+)" noun=" ?(\w+)">([^<]+)<\/a><popBold\/> is revealed from hiding\./ # Players, Bandits, Wardens
        OverWatch.push_revealed_targets($1, $2, $3)
      when /^<pushBold\/>\w+ <a exist="(\d+)" noun=" ?(\w+)">([^<]+)<\/a><popBold\/> comes out of hiding\./ # Players, AC, Wardens
        OverWatch.push_revealed_targets($1, $2, $3)
      when /<pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> leaps suddenly forward, uncovering <pushBold\/>\w+ <a exist="(\d+)" noun=" ?(\w+)">([^<]+)<\/a><popBold\/>, who was hidden\!/ # Cat AC
        OverWatch.push_revealed_targets($1, $2, $3)
      when /<pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> takes a pointed step forward, revealing <pushBold\/>\w+ <a exist="(\d+)" noun=" ?(\w+)">([^<]+)<\/a><popBold\/>, who was hidden\!/ # Canine AC
        OverWatch.push_revealed_targets($1, $2, $3)
      when /^<pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> dives ahead while flapping <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> wings, exposing <pushBold\/>\w+ <a exist="(\d+)" noun=" ?(\w+)">([^<]+)<\/a><popBold\/>, who was hidden\!/ # Avian AC
        OverWatch.push_revealed_targets($1, $2, $3)
      when /^<pushBold\/>\w+ <a exist="(\d+)" noun=" ?(\w+)">([^<]+)<\/a><popBold\/> leaps out of <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> hiding place\!/ # Bandit
        OverWatch.push_revealed_targets($1, $2, $3)
      when /^<pushBold\/>\w+ <a exist="(\d+)" noun=" ?(\w+)">([^<]+)<\/a><popBold\/> suddenly leaps from <pushBold\/><a exist="\d+" noun="\w+">\w+<\/a><popBold\/> hiding place\!/ # Bandit Spawn
        OverWatch.push_revealed_targets($1, $2, $3)
      when /^<pushBold\/>\w+ <a exist="(\d+)" noun=" ?(\w+)">([^<]+)<\/a><popBold\/> springs upon you from behind and aims a blow to your head\!/ # Subdue?
        OverWatch.push_revealed_targets($1, $2, $3)
      when /^<pushBold\/>\w+ <a exist="(\d+)" noun=" ?(\w+)">([^<]+)<\/a><popBold\/> springs upon you from behind and attempts to grasp you by the chin while bringing <pushBold\/><a exist="\d+" noun=" ?\w+">\w+<\/a><popBold\/> <a exist="\d+" noun="[^"]+">[^<]+<\/a> up to slit your throat\!/ # Cutthroat
        OverWatch.push_revealed_targets($1, $2, $3)

      # And then let's try to keep tracking of hidden targets
      when /<nav rm='\d+'\/>/ # Reset our hidden_targets when we change rooms. Hopefully eliminates stale data.
        OverWatch.room_with_hiders_reset
      when /^<pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/> slips into hiding\./
        OverWatch.track_hidden_targets(XMLData.room_id)
      when /flies out of the shadows toward you\!/ # You being attacked
        OverWatch.track_hidden_targets(XMLData.room_id)
      when /A faint silvery light flickers from the shadows./ # Hidden Bandits
        OverWatch.track_hidden_targets(XMLData.room_id)
      when /Suddenly, a tiny shard of jet black crystal flies from the shadows toward you!/ # Hidden Bandits
        OverWatch.track_hidden_targets(XMLData.room_id)
      when /With a barely audible hiss, <pushBold\/>\w+ <a exist="\d+" noun=" ?\w+">[^<]+<\/a><popBold\/> fades into the surroundings\./
        OverWatch.track_hidden_targets(XMLData.room_id)
      when /flies out of the shadows toward <a exist="\-\d+" noun="\w+">[^<]+<\/a>\!/ # Mob or player attacking player
        OverWatch.track_hidden_targets(XMLData.room_id)
      when /flies out of the shadows toward <pushBold\/>\w+ <a exist="\d+" noun="\w+">[^<]+<\/a><popBold\/>\!/ # Player (maybe mob) attacking mob
        OverWatch.track_hidden_targets(XMLData.room_id)
      end
    end
  end
end

OverWatch.watch
