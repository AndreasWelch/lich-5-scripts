require "Olib"

room_klass = Room.current.class
unless room_klass.method_defined?(:go2)
  room_klass.send(:define_method, :go2) do
  Script.run("go2", self.id.to_s)
end

[Fixnum, String, Symbol].each do |klass|
  unless klass.method_defined?(:go2)
    klass.send(:define_method, :go2) do
      Script.run("go2", self.to_s)
    end
  end
end

module Portkey
  module Outcomes
    WITHDRAW = %r{carefully records|through the books}
    BOUGHT   = %r{quickly hands}
    TELEPORT = %r{whirlwind of color subsides}
    EXPIRED  = %r{pass is expired|not valid for departures}
    TOSSED   = %r{As you let go}
    POOR     = %r{don't have enough}
  end
  ##
  ## interact with a pass
  ##
  class Pass
    attr_reader :pass
    def initialize(pass)
      @pass = pass
    end

    def run(cmd, outcome)
      dothistimeout(cmd, 5, outcome)
    end

    def held?
      [GameObj.left_hand, GameObj.right_hand].map(&:id).include?(@pass.id)
    end

    def fetch
      unless held?
        empty_hands
        fput "get ##{@pass.id}" 
      end
      yield
      empty_right_hand
      fill_hands
      self
    end

    def use
      fetch do
        result = run("raise ##{@pass.id}", 
          Regexp.union(Outcomes::TELEPORT, Outcomes::EXPIRED))
        case result
        when Outcomes::TELEPORT
          # silence is golden
        when Outcomes::EXPIRED
          run("drop ##{@id}", Outcomes::TOSSED)
        else
          raise Exception.new "unhandled outcome"
        end
      end
    end
  end
  ##
  ## what a chronomage pass looks like
  ##
  PASS_NAME = %{Chronomage day pass}.freeze
  ##
  ## valid depart annexes
  ##
  DEPARTURES = %w{8635 15619}.freeze
  ##
  ## make sure to look in all the containers in our inventory
  ##
  def self.scan_inventory
    GameObj.inv.each do |item|
      fput "look in ##{item.id}"
    end
    find_pass
  end
  ##
  ## 
  ##
  def self.find_pass
    ([GameObj.right_hand, GameObj.left_hand] + GameObj.containers.values).flatten.find do |obj|
      obj.name.eql?(PASS_NAME)
    end or scan_inventory
  end

  def self.find_nearest_annex
    Room[Room.current.find_nearest(DEPARTURES)]
  end

  def self.buy_pass
    :bank.go2
    case (result = fput "withdraw 5000", 5, Outcomes::WITHDRAW)
    when POOR
      raise Exception.new %{insufficient funds}
    else
      :chronomage.go2
      find_pass
    end
  end

  def self.run
    pass = find_pass or buy_pass
    fput "unhide" if hidden?
    find_nearest_annex.go2
    Pass.new(pass).use
    if chain = Script.current.vars.last
      chain.go2
    end
  end

  run()
end