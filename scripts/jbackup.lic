=begin

	This script exists to backup several primary files used by lich.

	Thoughts for future changees:
		* add and remove files to be backed up.
		* upload the backup to another source via FTP, SFTP, etc.
		* save a maximum given number of backups and delete anything additional.
		* local directory for backups


	Author: Richard A. Secor (rsecor@rsecor.com) AKA Jahadeem
	Author Website: https://www.jahadeem.com/gsiv/
	Version: 0.0.3
	Date Created: 2019-09-14
	Date Updated: 2019-09-16
	game: All
	tags: backup, back up, lich, files, copy
	Usage: #{$lich_char}jbackup

	0.0.1 (2019-09-14): 
		Initial Version
	0.0.2 (2019-09-15):
		QOL updates
	0.0.3 (2019-09-16):
		Added safe script trust information.
		Prepended all output with script name.

=end

output = ""

unless $SAFE == 0
	output.concat "[#{script.name}] #{script.name} must be trusted to allow it to read and write files.\n"
	output.concat "[#{script.name}] Please run the following command before trying again: #{$lich_char}trust #{script.name}\n"
	respond output
        exit
end

require 'fileutils'

backupFiles = [ 'alias.db3' , 'entry.dat' , 'lich.db3' ]

# Check to see if this script is being ran on startup 
if ( script.vars[ 1 ].downcase == 'help' )
	output.concat "[#{script.name}] This script exists to backup several primary files used by lich.\n"
	output.concat "[#{script.name}] Currenly it only backs up: alias.db3, entry.dat, and lich.db3\n"
	output.concat "[#{script.name}] This script requires trust.\n"
	output.concat "[#{script.name}] \n"
	output.concat "[#{script.name}] Please remember to clean out old backups on ocassion by hand.\n"
	output.concat "[#{script.name}] \n"
	output.concat "[#{script.name}] usage:\n"
	output.concat "[#{script.name}] \n"
	output.concat "[#{script.name}]   #{$clean_lich_char}#{script.name}          Backup Files\n"
	output.concat "[#{script.name}]   #{$clean_lich_char}#{script.name} help     This help menu.\n"
	output.concat "[#{script.name}] \n"
	respond output
	exit
else
	# backup
	# "#{$lich_dir}data/inv.db3"	
	backupFiles.each do |file|
		fullfile = "#{$lich_dir}data/#{file}"
		if File.exists?(fullfile)
			if File.exist?(fullfile)
				sizeOrig = File.size(fullfile)
				backupTime = Time.new.strftime("%Y%m%d-%H%M%S")
				backupfullfile = "#{$lich_dir}data/#{file}.#{backupTime}"
				FileUtils.copy_file(fullfile,backupfullfile)
				sizeBackup = File.size(backupfullfile)
				if ( sizeOrig == sizeBackup )
					respond "[#{script.name}] Backup Success: #{fullfile} to #{backupfullfile}\n"
				else
					respond "[#{script.name}] Backup Size Mismatch: #{fullfile} to #{backupfullfile}\n"
				end
			else
				respond "[#{script.name}] ERROR: Not a file: #{fullfile}\n"
			end
		else
			respond "[#{script.name}] ERROR: Does not exist: #{fullfile}\n"
		end
		
	end
end

exit 
