=begin
   Script to add SK spells to be known and used with Spell API calls.

  ;sk add <SPELL_NUMBER>  - Add spell number to saved list
  ;sk rm <SPELL_NUMBER>   - Remove spell number from saved list
  ;sk list                - Show all currently saved SK spell numbers

            author: Elanthia-Online
              game: Gemstone
              tags: sk, self knowledge
          requires: Lich >= 4.6.0
           version: 1.2.2

  v1.2.2(2025-01-26)
    - Refactored for non-breaking inclusion for Lich 5.11+
  v1.2.1 (2024-08-24)
    - Fix to use old time_per calc if exists and < 10mins
  v1.2.0 (2024-02-22)
    - Add ";sk help" output
  v1.1.0 (2023-08-21)
    - Fix for Ruby 3.2
    - Add ability to list all current saved SK spell numbers
  v1.0.0 (2021-08-11)
    - initial release
=end

class Spell
  if defined?(Games::Gemstone::Spell)
    OLD_KNOWN_METHOD ||= Games::Gemstone::Spell.instance_method(:known?)
    OLD_TIME_PER_METHOD ||= Games::Gemstone::Spell.instance_method(:time_per)
  elsif defined?(Lich::Common::Spell)
    OLD_KNOWN_METHOD ||= Spell.instance_method(:known?)
    OLD_TIME_PER_METHOD ||= Spell.instance_method(:time_per)
  else
    fail("sk.lic not currently equipped to handle your version of Lich, exiting!")
  end
  def known?
    SK.known?(self) or OLD_KNOWN_METHOD.bind(self).call()
  end

  def time_per(arg = nil)
    # dumb time per of 10m because lots of things break otherwise
    return 10.0 if SK.known?(self) && (OLD_TIME_PER_METHOD.bind(self).call(arg).nil? || OLD_TIME_PER_METHOD.bind(self).call(arg) < 10)
    return OLD_TIME_PER_METHOD.bind(self).call(arg)
  end
end

module SK
  NAMESPACE = "sk/known"
  Vars[NAMESPACE] ||= []

  def self.known?(spell)
    Vars[NAMESPACE].include?(spell.num.to_s)
  end

  def self.list
    respond "Current SK Spells: #{Vars[NAMESPACE].inspect}"
  end

  def self.help
    respond "   Script to add SK spells to be known and used with Spell API calls."
    respond ""
    respond "   ;sk add <SPELL_NUMBER>  - Add spell number to saved list"
    respond "   ;sk rm <SPELL_NUMBER>   - Remove spell number from saved list"
    respond "   ;sk list                - Show all currently saved SK spell numbers"
    respond "   ;sk help                - Show this menu"
    respond ""
  end

  def self.add(*numbers)
    Vars[NAMESPACE] = (Vars[NAMESPACE] + numbers).uniq
  end

  def self.remove(*numbers)
    Vars[NAMESPACE] = (Vars[NAMESPACE] - numbers).uniq
  end

  def self.main()
    action = Script.current.vars[1].to_sym
    spells = Script.current.vars[2..-1]
    case action
    when :add
      self.add(*spells)
    when :rm
      self.remove(*spells)
    when :list
      self.list
    when :help
      self.help
    else
      fail "unknown action #{action}"
    end
  end

  self.main() if Script.current.vars.size > 1
end
