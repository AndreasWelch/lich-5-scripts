=begin
    Dramaticaaly shortens most combat text.
    Designed for use in group combat or invasions to manage the spam and screen scroll.

     author: Daedeus (updates by Tysong/Ragz)
       name: briefcombat
       tags: brief, briefcombat, condensing, condense, combat, squelch
    version: 0.0.5

    changelog:
        0.0.5 (2020-05-01
            fix for additional condensing of various casting
            fix to now show player deaths (previously would squelch/hide)
        0.0.4 (2017-05-15)
            added a 50ms sleep so GameObj can update npc status,
            increasing reliability of status effects
        0.0.3 (2017-04-16)
            add catch for polearms
        0.0.2 (unknown)
            cleaned up some comments, unused code
        0.0.1 (unknown)
            initial release
=end

$debug = false
put 'set MonsterBold On' #required for monster recognition

#  if detected it will compress the subsequent combat messaging
#  for casters it's probably gesture/channel.
pc_or_you = '<a exist="(-\d+)" noun="\w+">\w+<\/a>|You'
verbs = ['gestures? at',
		 'gestures.',
         'sings with renewed vigor',
         'continues to sing a disruptive song.',
		 'skillfully begins to weave another verse into',
		 'skillfully weaves another verse into',
         'channels? at',
         '(?:hurl|fire|swing|thrust)s? an? [\w \-\']+ at',
         'swings? an? [\w \-\']+ at',
         'thrusts?(?: with)? an? [\w \-\']+ at',
         'punches?(?: with)? an? [\w \-\']+ at',
         'releases',
         'release',
         'directing the sound of (?:his|her|your) voice at',
		 'to strike at',
         '(?:make a precise )?attempts? to (?:punch|jab|grapple|kick)']
		 
target = '<pushBold\/>(.*)<popBold\/>' #npc targets are in bold thanks to MonsterBold setting

$combat_regex = /(#{pc_or_you}) (#{verbs.join('|')})/

n = -1
$compressing = false
$compressed = nil
$targets_damage = nil
$target = nil
$targets_last_message = nil
$targets_status = nil

$shortening = true

unless script.vars.empty? 
    n = script.vars[0].strip.to_i
end

def begin_compress(s, targetstr)
    targetstr =~ /<a exist="([\S\d]+)"/
    targetid = $1
    $miss_message = ' is unaffected'
    $prev_message = nil
    
    unless $compressing
        $compressing = true
        $targets_damage = Hash.new
        $targets_last_message = Hash.new
        $targets_status = Hash.new

        $compressed = Array.new
        $target = targetid
    
        $compressed.push(s.chomp)
        $targets_damage[targetid] = 0 #begin counting damage
        $targets_last_message[targetid] = s
    end
end

def end_compress(s)
    $compressing = false
    num_targets = $targets_damage.length
    #echo num_targets if Char.name == "Tysong"
    #echo $targets_damage if Char.name == "Tysong"
    if num_targets > 2
        $compressed[0].chop! #remove punctuation mark
        $compressed[0] += " and 1 other." if num_targets == 3
        $compressed[0] += " and #{num_targets-1} others." if num_targets > 3
    else
        #$compressed[0] = nil
    end

    #tiny sleep to allow GameObj to update npcs in memory
    sleep 0.05
    
    $targets_damage.each { |targetid,damage| 

        if GameObj.npcs.any?{ |i| i.id == targetid}
            targ = GameObj.npcs.find{ |i| i.id == targetid}
        elsif GameObj.pcs.any?{ |i| i.id == targetid}
            targ = GameObj.pcs.find{ |i| i.id == targetid}
        end
        
        str = "A <pushBold/><a exist=\"#{targ.id}\">#{targ.name}</a><popBold/> "
        
        str.concat "takes #{damage} damage and " if damage > 0
        
        if targ.status =~ /dead|gone/
            str.concat "is <pushBold/>DEAD!<popBold/>!"
        elsif !$targets_status[targetid].nil? && $targets_status[targetid].any?
            str.concat 'is '
            #target acquired a status (stunned, proned, etc)
            str.concat $targets_status[targetid].join(' and ')
            str.concat '!'
        elsif damage > 0
            #no status acquired, target not dead, damage only
            str.sub!(/ and /, '!')
        else
            #no damage, no status, probably a miss or something this script doesn't check
            if $targets_last_message[targetid] =~ /(close|clean) miss/ && $targets_damage.length > 1
                str.concat "is missed." #when more than one target, "A clean miss!" is too ambiguous
            elsif 
                $targets_last_message[targetid] =~ /Warded off!/ && $targets_damage.length > 1
                str.concat "wards off the spell." #when more than one target, "Warded off!" is too ambiguous
            else
                if $targets_last_message[targetid]
                    str = $targets_last_message[targetid]
                else 
                    str.concat "is unaffected."
                end
            end
        end

        $compressed.push(str) 
    }

    $compressed.push(s) #add the prompt
    result = $compressed.compact.join("\n")
    #echo result.inspect
    return result
end

def compress(s)
    s.chomp!
    checkstatus = proc { |s, targetid|
        $targets_status[$target] = Array.new if $target_status[$target].nil?

        if s =~ /stunned|falls over|(dragged|knocked|down) to the (w+)|buffeted by the dark ethereal waves/
            $targets_status[$target].push($&)
        end
    }

    if s =~ /(\d+) points of damage/
        #assume the last target took the damage
        $targets_damage[$target] += $1.to_i
    elsif s =~ /<a exist="([\d]+)"/
        #possible target change
        if GameObj.npcs.any? {|npc| npc.id == $1}
            $target = $1 
        elsif GameObj.pcs.any? {|pc| pc.id == $1}
            $target = $1 
        end
        $targets_damage[$target] = 0 unless $targets_damage.has_key?($target)
        checkstatus.call s

        $targets_last_message[$target] = s
    elsif s !~ /Cast Roundtime|Forcing stance down|Feeling nervous yet/
        #this will catch "A clean miss" or 'Warded Off'.... probably
        $targets_last_message[$target] = s
    end
end

def brief(s)
    no_self_spells = proc{ |s|
        if s =~ /(<castTime value='\d+'\/>)/;
          return s[0,$~.end(0)]
        elsif s =~ /<spell exist='spell'>([\w ']+)<\/spell>/
          return $&
        end

        return nil if s =~ /Your spell(song)? is ready\.|You gesture\.|Cast Roundtime \d Seconds.?/
    }

    no_roundtime = proc { |s|
        return nil if s =~ /Roundtime:/
    }

    no_709_decay = proc { |s|
        return nil if s =~ /thrash(es)? about briefly before decaying into dust./
    }
    no_gesturing = proc{ |s|
        return nil if s =~ /gestures.$/
    }
    no_mstrike_prep = proc { |s| 
        return nil if s =~ /In a breathtaking display of ability and combat mastery/
    }
    no_get_arrow = proc { |s|
        return nil if s =~ /removes a single(.*)from/
    }
    #proc that compresses combat messaging for your personal targeted attacks
    compress_combat = proc{ |s|
        if s =~ $combat_regex
            target_string = $4
            is_my_action = $1 == 'You'

            if is_my_action
                begin_compress(s, target_string)
            else
                # is_pc = GameObj.pcs.any?{|g| g.id == $2.to_i}
                begin_compress(s, target_string) # if is_pc
            end
            #don't compress if a creature is swinging
            return nil
        end
    }

    no_self_search = proc{ |s|
        if s =~ /You search the <pushBold\/>|<pushBold\/>.*<popBold\/> (had nothing of interest|didn't carry any silver|had nothing else of value)/
            return nil
        end
    }

    shorten_searches = proc{ |s| 
        if s =~ /<a exist="(-\d+)" noun="\w+">\w+<\/a> searches <pushBold\/>/
            $shortening = true
        end
    }

    #main
    no_roundtime.call s

    if $shortening
        if s =~ /<prompt/
            $shortening = false
            return s
        else
            return nil
        end
    end

    if $compressing
        return end_compress(s) if s =~ /<prompt/

        compress(s)
        return nil
    end

    compress_combat.call s
    no_self_spells.call s
    no_gesturing.call s
    no_self_search.call s
    shorten_searches.call s
    no_mstrike_prep.call s
    no_709_decay.call s
    no_get_arrow.call s

    s
end

DownstreamHook.add('brief', proc{ |s| brief(s) })
before_dying{DownstreamHook.remove('brief')}
while n!=0;sleep 1;end
exit
