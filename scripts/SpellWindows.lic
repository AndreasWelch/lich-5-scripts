=begin
  SpellWindow.lic

  Replaces Wrayths integrated spell active windows for spells, buffs, debuffs, cooldowns.

  The script blocks the xml feed for active spells, buffs, debuffs, cooldowns, quickbar, and combat.
  It grabs the data from Effects:: and populates the wrayth windows.
  This gives the same exact information, without committing a ddos attack on your frontend.

  Now it also incorporates buff_tracker.

  NOTE ** If you use the combat window in order to click to attack, be sure to toggle that feed with:
      ;spellwindow combat

  ;spellwindow       - starts the script
  ;spellwindow help  - for the details


        author: Nisugi
  contributors: Nisugi
          game: Gemstone
          tags: hunting, combat, tracking, spells, buffs, debuffs, cooldowns
       version: 1.1
      required: Wrayth

  Change Log:
  v1.2 (2024-12-13)
    - removed target_window
  v1.1 (2024-12-13)
    - incorporated buff_tracker
    - incorporated target_window
  v1.0 (2024-12-12)
    - Initial Release
=end

module SpellWindow
  UPSTREAM_HOOK_ID = "#{Script.current.name.downcase}::upstream"
  DOWNSTREAM_HOOK_ID = "#{Script.current.name.downcase}::downstream"
  HOOK_CMD_RX = /^(?:<c>)?;(?:#{Script.current.name}|buff)(?:\s(.*))?$/i
  CMD_QUEUE = Queue.new

  def self.save_settings
    CharSettings['spells'] = @show_spells
    CharSettings['buffs'] = @show_buffs
    CharSettings['debuffs'] = @show_debuffs
    CharSettings['cooldowns'] = @show_cooldowns
    CharSettings['combat'] = @block_combat
    CharSettings['my_buffs'] = @my_buffs
    CharSettings['missing'] = @show_missing
  end

  # settings!
  def self.initialize_script
    defaults = {
      'spells'    => true,
      'buffs'     => true,
      'debuffs'   => true,
      'cooldowns' => true,
      'combat'    => true,
      'my_buffs'  => [],
      'missing'   => false
    }

    defaults.each do |key, value|
      CharSettings[key] ||= value
    end

    @show_spells = CharSettings['spells']
    @show_buffs = CharSettings['buffs']
    @show_debuffs = CharSettings['debuffs']
    @show_cooldowns = CharSettings['cooldowns']
    @block_combat = CharSettings['combat']
    @show_missing = CharSettings['missing']
    @my_buffs = CharSettings['my_buffs']

    @@ACTIVE_SPELLS = Regexp.new(/<dialogData id=\'Active Spells\' clear=\'t\'><\/dialogData>/)
    @@DEBUFFS = Regexp.new(/<dialogData id=\'Debuffs\' clear=\'t\'><\/dialogData>/)
    @@BUFFS = Regexp.new(/<dialogData id=\'Buffs\' clear=\'t\'><\/dialogData>/)
    @@COOLDOWNS = Regexp.new(/<dialogData id=\'Cooldowns\' clear=\'t\'><\/dialogData>/)
    @@COMBAT = Regexp.new(/<dialogData id=\'combat\'>/)
    @@QUICK = Regexp.union(/<openDialog id=\"quick\" location=\"quickBar\"/,
                           /<switchQuickBar id=\"quick\"\/>/)
    regexes = [@@ACTIVE_SPELLS, @@DEBUFFS, @@BUFFS, @@COOLDOWNS, @@QUICK]
    regexes << @@COMBAT if @block_combat
    @@MAX_CHECK = Regexp.union(regexes)

    # Get to hookin'
    DownstreamHook.add(DOWNSTREAM_HOOK_ID, proc do |server_string| SpellWindow.check_line(server_string) end)
    UpstreamHook.add(UPSTREAM_HOOK_ID, proc do |command|
      if command =~ HOOK_CMD_RX
        CMD_QUEUE.push($1)
        nil
      else
        command
      end
    end)

    # Clean up
    before_dying {
      UpstreamHook.remove(UPSTREAM_HOOK_ID)
      DownstreamHook.remove(DOWNSTREAM_HOOK_ID)
      @@thread.kill if @@thread.alive?
      SpellWindow.save_settings
    }
    if @show_missing
      puts("<closeDialog id='Missing Spells'/><openDialog type='dynamic' id='Missing Spells' title='Missing Spells' target='Missing Spells' scroll='manual' location='main' justify='3' height='68' resident='true'><dialogData id='Missing Spells'></dialogData></openDialog>")
    end
  end

  def self.add_buff(var)
    @my_buffs << var unless @my_buffs.include?(var)
    puts("#{Spell[var].name} added.")
  end

  def self.remove_buff(var)
    @my_buffs.delete(var)
    puts("#{Spell[var].name} removed.")
  end

  def self.my_buffs
    puts("    You have chosen to monitor:")
    puts('<output class="mono"/>')
    @my_buffs.sort_by { |b| Spell[b].num }.each { |b|
      puts("%8s  %s" % [Spell[b].num, Spell[b].name])
    }
    puts('<output class=""/>')
  end

  def self.missing_spells
    missing = @my_buffs - Spell.active.map { |s| s.name }
    output = "<dialogData id='Missing Spells' clear='t'></dialogData><dialogData id='Missing Spells'>"
    top_value = 0
    if missing.length > 0
      missing.sort.each do |s|
        output += "<label id= '#{Spell[s].num}' value='#{s}' justify='3' left='0' height='1' width='187'/>"
        # output += "<label id='#{Spell[s].num}' value='#{s}' top='#{top_value} left='0' align='center'/>"
        top_value += 16
      end
    else
      output += "<label id='lblNone' value='No missing spells.' top='0' left='0' align='center'/>"
    end
    output += "</dialogData>"
    output
  end

  # format simu uses for the progress bar time value
  def self.format_time(timeleft)
    seconds = timeleft * 60
    hours = (seconds / 3600).to_i
    minutes = (seconds % 3600 / 60).to_i
    seconds = (seconds % 60).to_i
    format("%02d:%02d:%02d", hours, minutes, seconds)
  end

  # format simu uses for the label time value
  def self.display_time(timeleft)
    seconds = timeleft * 60
    if seconds < 120
      "#{seconds.to_i}s"
    else
      hours = (seconds / 3600).to_i
      minutes = (seconds % 3600 / 60).to_i
      format("%d:%02d", hours, minutes)
    end
  end

  # build outputs for our Effects windows
  def self.build_output(effect_type, title)
    output = "<dialogData id='#{title}' clear='t'></dialogData><dialogData id='#{title}'>"
    top_value = 0

    effects = effect_type.to_h
    id_effects = effects.select { |k, _v| k.is_a?(Integer) }
    text_effects = effects.reject { |k, _v| k.is_a?(Integer) }

    if id_effects.empty?
      output += "<label id='lblNone' value='No #{title.downcase} found.' top='0' left='0' align='center'/>"
    else
      id_effects.each do |sn, end_time|
        stext = text_effects.shift[0]
        duration = ((end_time - Time.now) / 60.to_f)
        next if duration < 0

        max_duration = Spell[sn].max_duration || 5
        bar_value = ((duration / max_duration) * 100).to_i
        output += "<progressBar id='#{sn}' value='#{bar_value}' text=\"#{stext}\" left='22%' top='#{top_value}' width='76%' height='15' time='#{format_time(duration)}'/><label id='l#{sn}' value='#{display_time(duration)} ' top='#{top_value}' left='0' justify='2' anchor_right='spell'/>"
        top_value += 16
      end
    end
    output += "</dialogData>"
    output
  end

  def self.update_window
    @@thread = Thread.new do
      begin
        loop do
          output = ''
          output += SpellWindow.build_output(Effects::Spells, 'Active Spells') if @show_spells
          output += SpellWindow.build_output(Effects::Buffs, 'Buffs') if @show_buffs
          output += SpellWindow.build_output(Effects::Debuffs, 'Debuffs') if @show_debuffs
          output += SpellWindow.build_output(Effects::Cooldowns, 'Cooldowns') if @show_cooldowns
          output += SpellWindow.missing_spells if @show_missing
          puts(output)
          sleep(1)
        rescue StandardError => e
          _respond("[ERROR] Exception in update_window: #{e.message}")
          _respond(e.backtrace)
        end
      end
    end
  end

  def self.check_line(xml_line)
    return nil if @@MAX_CHECK.match?(xml_line)
    return xml_line
  end

  def self.command(args)
    action, arg = args.split(' ')
    action = action.downcase
    unless action
      SpellWindow.update_window
    else
      if action == 'help'
        puts('<output class="mono"/>')
        [
          ['',               'Start the script.'],
          ['spells',         'Toggle the Active Spells window.'],
          ['buffs',          'Toggle the Buffs window.'],
          ['debuffs',        'Toggle the Debuffs window.'],
          ['cooldowns',      'Toggle the Cooldowns window.'],
          ['missing',        'Toggle the Missing Spells window.'],
          ['add <spell>',    'Add to missing spells trackig. Accepts spell number or name.'],
          ['remove <spell>', 'Remove from missing spells tracking. Accepts spell number or name.'],
          ['list',           'List spells you are currently tracking.'],
          ['quickload',      'Adds all of your currently worn (+ known) spells to the list.'],
          ['combat',         'Toggle combat window feed. Enable if you use the combat window to click.'],
          ['settings',       'Lists current settings.'],
        ].each { |cmd_pair|
          puts(
            ("%8s %-15s %s" % ([';spellwindows'] + cmd_pair))
              .gsub('<', '&lt;')
              .gsub('>', '&gt;')
          )
        }
        puts('<output class=""/>')
        exit
      elsif action == 'settings'
        puts("  You're current SpellWindow settings are:")
        puts('<output class="mono"/>')
        puts("  Active Spells   #{@show_spells}")
        puts("          Buffs   #{@show_buffs}")
        puts("        Debuffs   #{@show_debuffs}")
        puts("      Cooldowns   #{@show_cooldowns}")
        puts(" Missing Spells   #{@show_missing}")
        puts("         Combat   #{!@block_combat}")
        puts("")
        puts('<output class=""/>')
        SpellWindow.my_buffs
      elsif action == 'add'
        if Spell[arg].num.nil?
          puts("#{arg} is not a valid buff or spell. Please try again.")
        else
          SpellWindow.add_buff(Spell[arg].name)
        end
      elsif action =~ /rem(?:ove)?/
        if Spell[arg].num.nil?
          _respond("#{arg} is not a valid buff or spell. Please try again.")
        else
          SpellWindow.remove_buff(Spell[arg].name)
        end
      elsif action == 'list'
        SpellWindow.my_buffs
      elsif action == 'quickload'
        Spell.active.filter { |s| s.known? }.each { |s| SpellWindow.add_buff(Spell[s].name) }
      elsif action == 'combat'
        @block_combat = !@block_combat
        respond(@block_combat ? 'Combat window feed enabled' : 'Combat window feed disabled')
      elsif action == 'spells'
        @show_spells = !@show_spells
        _respond(@show_spells ? 'Active Spells window enabled' : 'Active Spells window disabled')
      elsif action == 'buffs'
        @show_buffs = !@show_buffs
        _respond(@show_buffs ? 'Buffs window enabled' : 'Buffs window disabled')
      elsif action == 'debuffs'
        @show_debuffs = !@show_debuffs
        _respond(@show_debuffs ? 'Debuffs window enabled' : 'Debuffs window disabled')
      elsif action == 'cooldowns'
        @show_cooldowns = !@show_cooldowns
        puts(@show_spells ? 'Cooldowns window enabled' : 'Cooldowns window disabled')
      elsif action == 'missing'
        @show_missing = !@show_missing
        puts(@show_missing ? 'Missing spells window enabled' : 'Missing spells window disabled')
        puts("<closeDialog id='Missing Spells'/><openDialog type='dynamic' id='Missing Spells' title='Missing Spells' target='Missing Spells' scroll='manual' location='main' justify='3' height='68' resident='true'><dialogData id='Missing Spells'></dialogData></openDialog>") if @show_missing
        puts("<closeDialog id='Missing Spells'/>") if !@show_missing
      else
        SpellWindow.update_window
      end
    end
  end

  def self.processQueue
    unless CMD_QUEUE.empty?
      command = CMD_QUEUE.pop
      return if command.nil?
      SpellWindow.command(command)
    end
  end

  SpellWindow.initialize_script
  CMD_QUEUE.push(Script.current.vars[0] || 'update_window')

  loop {
    SpellWindow.processQueue
    sleep(0.25)
  }
end
