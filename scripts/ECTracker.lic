=begin
   A script that tracks enhancive charge loss. Will check charge level in the background when enhancives are active.

   ;ECTreacker help
      - list out the commands
   ;ECTracker alert
      - Toggle alert message when charge loss recorded
   ;ECTracker verbose
      - Toggle alert message when charge level is checked (mainly for troubleshooting)

   ;ECTracker 300
      - Start tracking, # determins time between checks in seconds. Defaults to 60 if left blank.
   ;eq ECTracker.generate_item_summary("item_name")
      - Lists a summary of the item selected. Accepts partial name.
   ;eq ECTracker.find_simultaneous_charge_loss
      - Lists events when more than one item lost a charge.

        author: Nisugi
  contributors: Nisugi
          game: Gemstone
          tags: enhancives, charge, tracking, data
       version: 1.1.0

  v1.1.0
    - added some more data to the display.
    - cleaned up time formatting in data
  v1.0.0
    - Initial Release
=end

require 'yaml'
require 'time'

module ECTracker
  UserVars.ectracker ||= { alert: false, verbose: false}

  ENHANCIVE_ON_MSGS = Regexp.union(
    /You are now accepting the benefits of your enhancive inventory items./,
    /You are already accepting the benefits of any and all enhancive items in your inventory./,
    /You cannot turn off enhancives while in combat./,
    /You are currently accepting the benefits of any and all enhancive items in your inventory./,
    /You concentrate, but nothing seems to happen./
  )
  ENHANCIVE_OFF_MSGS = Regexp.union(
    /You are no longer accepting the benefits of your enhancive inventory items./,
    /You already are not accepting the benefits of any enhancive items in your inventory./,
    /You are(?:<pushBold\/>)? not(?:<popBold\/>)? currently accepting the benefit of any enhancive items in your inventory./
  )
  ENHANCIVE_MSGS = Regexp.union(ENHANCIVE_ON_MSGS, ENHANCIVE_OFF_MSGS)

  def self.help
    msg = <<~HELP

      ;ECTracker alert
        - Toggle alert message when charge loss recorded

      ;ECTracker verbose
        - Toggle alert message when charge level is checked (mainly for troubleshooting)

      ;ECTracker 300
        - Start tracking, # determines time between checks in seconds. Defaults to 60 if left blank.

      ;eq ECTracker.generate_item_summary("item_name")
        - Lists a summary of the item selected. Accepts partial name. No name defaults to all items.

      ;eq ECTracker.find_simultaneous_charge_loss
        - Lists events when more than one item lost a charge.
    HELP
    Lich::Messaging.mono(msg)
  end

  # load our data, or create our data structure if first run
  def self.load
    @@filename = File.join(DATA_DIR, XMLData.game, Char.name, "ECTracker.yaml")
    game_dir = File.join(DATA_DIR, XMLData.game)
    char_dir = File.join(game_dir, Char.name)
    Dir.mkdir(game_dir) unless File.exist?(game_dir)
    Dir.mkdir(char_dir) unless File.exist?(char_dir)

    if File.exist?(@@filename)
      @@items = YAML.load_file(@@filename, permitted_classes: [Symbol, Time]) || {}
      
      # Ensure `time_checked` and `expiration` fields are uniform strings
      @@items.each_value do |entries|
        entries.each do |entry|
          entry[:time_checked] = entry[:time_checked].strftime("%Y-%m-%d %H:%M:%S") if entry[:time_checked].is_a?(Time)
          entry[:expiration] = entry[:expiration].strftime("%Y-%m-%d %H:%M:%S") if entry[:expiration].is_a?(Time)
        end
      end

      Lich::Messaging.msg("info", "Enhancive Charge Tracking file loaded. #{@@filename}")
    else
        @@items = {}
      Lich::Messaging.msg("info", "Creating Enhancive Charge Tracking file. #{@@filename}")
    end
  end

  # meat and potatoes
  # determine if enhancives are active or not.
  def self.check_enhancive_state
    result = Lich::Util.issue_command("invento enh", ENHANCIVE_MSGS, /You currently have \d+ enhancive pauses? available./, include_end: false, timeout: 3, silent: true, usexml: true, quiet: true)
    UserVars.enhancives_active = result.include?(ENHANCIVE_ON_MSGS)
  end

  def self.check_charges
    Lich::Messaging.msg("info", "Nom Nom Nom (Checking charges)") if UserVars.ectracker[:verbose]
    timestamp = Time.now.strftime("%Y-%m-%d %H:%M:%S")  # Timestamp without time zone
    result = Lich::Util.issue_command("invento enh list", /Your worn items are:/, /For more information, see/, include_end: false, timeout: 3, silent: true, usexml: true, quiet: true)
  
    result.each do |line|
      case line
      when /[^<]+<a exist="\d+" noun="\w+">([^<]+)<\/a>[^(]+\((?:<pushBold\/>)?(\d+)(?:<popBold\/>)?\/\d+ charges\)/
        item_name = $1.strip
        charges = $2.to_i
  
        @@items[item_name] ||= []
        last_entry = @@items[item_name].last
        charge_lost = last_entry && last_entry[:charges] > charges
        if last_entry.nil? || charge_lost || last_entry[:active] != UserVars.enhancives_active
          @@items[item_name] << { charges: charges, time_checked: timestamp, active: UserVars.enhancives_active }
        end
        Lich::Messaging.msg("info", "CHARGE LOST - #{item_name}") if charge_lost && UserVars.ectracker[:alert]
  
      when /[^<]+<a exist="\d+" noun="\w+">([^<]+)<\/a>[^(]+\(charged until (.*?)\)/
        item_name = $1.strip
        expiration = $2.strip
        @@items[item_name] ||= []
        last_entry = @@items[item_name].last
  
        begin
          # Attempt to parse the expiration date using the specific format
          expiration_time = Time.strptime(expiration, "%m/%d/%Y %H:%M:%S %Z").strftime("%Y-%m-%d %H:%M:%S")
          # Add a new entry with expiration if itâ€™s different from the last recorded expiration
          if last_entry.nil? || last_entry[:expiration] != expiration_time
            @@items[item_name] << { expiration: expiration_time, time_checked: timestamp, active: UserVars.enhancives_active }
          end
        rescue ArgumentError
          Lich::Messaging.msg("error", "Failed to parse expiration time for #{item_name}: #{expiration}")
        end
      end
    end
  end

  # utilities
  # Helper to format time in DD:HH:MM:SS format
  def self.format_time(total_seconds)
    days = (total_seconds / 86400).to_i
    hours = (total_seconds % 86400 / 3600).to_i
    minutes = (total_seconds % 3600 / 60).to_i
    seconds = (total_seconds % 60).to_i

    format("%02d:%02d:%02d:%02d", days, hours, minutes, seconds)
  end

  # Calculate the total active time for an item
  def self.calculate_total_active_time(entries)
    total_time = 0
    active_start_time = nil
    entries.each do |entry|
      time_checked = Time.strptime(entry[:time_checked], "%Y-%m-%d %H:%M:%S")
      if entry[:active]
        active_start_time ||= time_checked  # Convert from ISO 8601 string to Time object
      elsif active_start_time
          total_time += time_checked - active_start_time
          active_start_time = nil
      end
    end
    total_time += Time.now - active_start_time if active_start_time
    total_time.to_i
  end

  # Calculate the total charges lost for an item
  def self.calculate_total_charges_lost(entries)
    charges_lost = 0
    entries.each_cons(2) do |prev_entry, next_entry|
      next unless prev_entry[:charges] && next_entry[:charges]
      lost = prev_entry[:charges] - next_entry[:charges]
      charges_lost += lost if lost > 0
    end
    charges_lost
  end

  # Find times when a charge was depleted for an item
  def self.find_charge_depletion_times(entries)
    depletion_times = []
    entries.each_cons(2) do |prev_entry, next_entry|
      if prev_entry[:charges] && next_entry[:charges] && prev_entry[:charges] > next_entry[:charges]
        depletion_times << Time.strptime(next_entry[:time_checked], "%Y-%m-%d %H:%M:%S")
      end
    end
    depletion_times
  end

  def self.generate_item_summary(name = "all")
    msg = "Item Summary Report:\n\n"
  
    @@items.each do |item_name, entries|
      next unless name.downcase == "all" || item_name.downcase.include?(name.downcase)
  
      # Find the first recorded time for the item
      first_recorded_time = entries.first[:time_checked].is_a?(String) ? Time.parse(entries.first[:time_checked]) : entries.first[:time_checked]
      total_time_active_seconds = calculate_total_active_time(entries)
      total_time_active = format_time(total_time_active_seconds)
      charges_lost = calculate_total_charges_lost(entries)
      charge_depletion_times = find_charge_depletion_times(entries)
  
      # Calculate the average time between charge losses
      if charges_lost > 0
        average_time_between_losses = format_time((total_time_active_seconds / charges_lost.to_i).to_i)
      else
        average_time_between_losses = "N/A"
      end

      # Ensure the first entry is the initial time the item was recorded
      if charge_depletion_times.empty? || charge_depletion_times.first != first_recorded_time
        charge_depletion_times.unshift(first_recorded_time)
      end
  
      msg += "    Item Name: #{item_name}\n"
      msg += "  Time Active: #{total_time_active}\n"
      msg += " Charges Lost: #{charges_lost}\n"
      msg += "Avg Loss Time: #{average_time_between_losses}\n"
      msg += " ----------------------------------------------\n"
      msg += "   Charge Depletion Time  |  Time Since Last Loss\n"
  
      if charge_depletion_times.empty?
        msg += " - No charge depletion events recorded.\n"
      else
        previous_time = nil
        entries.each do |entry|
          next unless entry[:charges] # Skip entries without charge data
  
          time_checked = entry[:time_checked].is_a?(String) ? Time.parse(entry[:time_checked]) : entry[:time_checked]
          if charge_depletion_times.include?(time_checked)
            interval = previous_time.nil? ? 0 : (time_checked - previous_time).to_i
            msg += "#{entry[:charges].to_s.rjust(3)}) #{time_checked.strftime('%Y-%m-%d %H:%M:%S')}  |  #{format_time(interval)}\n"
            previous_time = time_checked
          end
        end
      end
      msg += "\n"
      Lich::Messaging.mono(msg)
      msg = ""
    end
    ECTracker.calculate_average_charge_loss
  end
  
  def self.find_simultaneous_charge_loss
    msg = "Simultaneous Charge Loss Events:\n"
    charge_times = Hash.new { |hash, key| hash[key] = [] }
  
    @@items.each do |item_name, entries|
      entries.each_cons(2) do |prev_entry, next_entry|
        next unless prev_entry[:charges] && next_entry[:charges] && prev_entry[:charges] > next_entry[:charges]
  
        # Ensure time_checked is a Time object
        time_checked = next_entry[:time_checked].is_a?(String) ? Time.parse(next_entry[:time_checked]) : next_entry[:time_checked]
        charge_times[time_checked] << { name: item_name, loss_time: time_checked }
      end
    end
  
    # Filter and sort events where multiple items lost charges simultaneously
    simultaneous_events = charge_times.select { |_, items| items.size > 1 }.sort.to_h
    if simultaneous_events.empty?
      msg += "No simultaneous charge loss events found."
    else
      simultaneous_events.each do |time, items|
        # Ensure `time` is a Time object and format it
        time = time.is_a?(Time) ? time : Time.parse(time)
        msg += "#{items.count} charges lost on #{time.strftime('%Y-%m-%d at %H:%M:%S')}\n"
        items.each do |item|
          msg += "  - #{item[:name]}\n"
        end
        msg += "\n"
      end
    end
    Lich::Messaging.mono(msg)
    msg = ""
  end
  
  def self.calculate_average_charge_loss
    total_time_between_losses = 0
    total_loss_events = 0
    item_averages = {}
  
    @@items.each do |item_name, entries|
      # Get charge depletion times for each item
      charge_depletion_times = find_charge_depletion_times(entries)
  
      # Calculate the time intervals for each charge depletion event for this item
      time_intervals = charge_depletion_times.each_cons(2).map { |a, b| (b - a) / 3600.0 }  # Hours
  
      # Skip if there are no intervals
      next if time_intervals.empty?
  
      # Calculate the average time interval for this item
      item_average = time_intervals.sum / time_intervals.size
      item_averages[item_name] = item_average
  
      # Accumulate for overall average
      total_time_between_losses += time_intervals.sum
      total_loss_events += time_intervals.size
    end
  
    # Calculate the overall average time between charge losses
    overall_average = total_loss_events > 0 ? (total_time_between_losses / total_loss_events) : 0
    Lich::Messaging.msg("info", "There is an average of #{overall_average.round(2)} hours between charge loss across all items.")
  
  end

  
  # Do the damn thang.
  # Watch for enhancive activation/deactivation
  Thread.new do
    status_tags
    while (line = get)
      if line =~ ECTracker::ENHANCIVE_ON_MSGS
        UserVars.enhancives_active = true
      elsif line =~ ECTracker::ENHANCIVE_OFF_MSGS
        UserVars.enhancives_active = false
      end
    end
  end

  if Script.current.vars[0] =~ /^verbose/
    UserVars.ectracker[:verbose] = !UserVars.ectracker[:verbose]
    Lich::Messaging.msg("info", "Verbose messaging active") if UserVars.ectracker[:verbose]
    Lich::Messaging.msg("info", "Verbose messaging inactive") if !UserVars.ectracker[:verbose]
    exit
  elsif Script.current.vars[0] =~ /^alert/
    UserVars.ectracker[:alert] = !UserVars.ectracker[:alert]
    Lich::Messaging.msg("info", "Verbose messaging active") if UserVars.ectracker[:alert]
    Lich::Messaging.msg("info", "Verbose messaging inactive") if !UserVars.ectracker[:alert]
    exit
  elsif Script.current.vars[0] =~ /^help/
    ECTracker.help
    exit
    # Set our check interval in seconds
  elsif Script.current.vars[0] =~ /^(\d+)$/
    @@time_between_checks = $1.to_i
    Lich::Messaging.msg("info", "Setting check interval to #{$1} seconds.")
  else
    @@time_between_checks = 60
    Lich::Messaging.msg("info", "Using default check interval of 60 seconds.")
  end

  # load our data up
  ECTracker.load
  before_dying { File.write(@@filename, @@items.to_yaml) }

  # Do an initial check then start our loop. Checking when enhancinves are activated/deactived or the check interval has elapsed.
  ECTracker.check_enhancive_state
  ECTracker.check_charges
  save_time = Time.now + 1800 # save every 30 minutes or when script is killed
  time_of_last_check = Time.now
  previous_enhancives_state = UserVars.enhancives_active
  loop do
    if ((Time.now - time_of_last_check) >= @@time_between_checks && UserVars.enhancives_active) || UserVars.enhancives_active != previous_enhancives_state
      ECTracker.check_charges
      if (Time.now - save_time) >= 0
        File.write(@@filename, @@items.to_yaml)
        save_time = (Time.now + 1800)
      end
      time_of_last_check = Time.now
      previous_enhancives_state = UserVars.enhancives_active
    end
    sleep(1)
  end
end

# need to make writing to file a lot less frequent.
# does it work for held items?
