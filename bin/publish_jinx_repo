#!/usr/bin/env ruby
require("fileutils")
require("json")
require('digest')

manifest = {available: [], last_updated: Time.now.to_i}

module Header
  HEADER_PATTERN = /^=begin\r?\n?(.+?)^=end/m

  def self.compile(file, out_dir)
    basename = File.basename(file)
    contents = File.read(file)
    return :noop unless contents =~ HEADER_PATTERN
    header = $1.strip
    header_file = "%s.header" % basename.split(".").first
    out_file = File.join(out_dir, header_file)
    File.write(out_file, header)
    header_file
  end
end

FileUtils.mkdir_p("dist/assets")
FileUtils.mkdir_p("dist/headers")

# todo: maybe expose this someday?
if File.exists?("dist/gameobj-data.xml")
  FileUtils.mv("dist/gameobj-data.xml", 
    "dist/assets/gameobj-data.xml")
end

Dir.glob("scripts/*").each {|script|
  basename = File.basename(script)
  FileUtils.cp(script, "dist/assets/%s" % basename)
  puts("jinx: packaging %s" % File.basename(script))
  cdn_path = "/assets/%s" % basename
  record = {
    file: cdn_path,
    last_commit: %x(git log -1 --date=unix --format="%ad" -- #{script}).strip.to_i,
    md5: Digest::MD5.file(script).hexdigest,
  }

  compiled = Header.compile(script, "dist/headers")
  # parse =begin/=end comment headers for backwards compat
  record[:header] = "/headers/%s" % compiled if compiled.is_a?(String)
  manifest[:available] << record
}


File.write("dist/manifest.json", 
  JSON.pretty_generate(manifest))
puts("created manifest.json")